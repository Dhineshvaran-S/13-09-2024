

  <!-- Main content area -->
    
  <div class="main-content" [class.expanded]="!sidebarVisible">
    <!-- Explore content: display cards only if 'explore' is selected -->
    <div *ngIf="selectedOption === 'explore'" class="card-container">
      <div *ngFor="let card of cards" class="card" [ngClass]="{'expanded': card.showDetails}">
        <!-- Two-column layout initially -->
        <div class="card-content">
          <div class="card-main-image">
            <img [src]="card.mainImage" alt="Main Image">
          </div>
          <div class="card-description">
            <h2>{{ card.title }}</h2>
            <p>{{ card.description }}</p>
            <p>{{ card.description }}</p>
            <p>{{ card.description }}</p>
            <button (click)="toggleDetails(card)">
              {{ card.showDetails ? 'Hide Details' : 'Show Details' }}
            </button>
          </div>
        </div>

        <!-- Expanded layout with slider and "Book Now" button -->
        <div class="card-details" *ngIf="card.showDetails">
          <div class="card-images">
            <div class="slider-wrapper" [ngStyle]="{'transform': 'translateX(' + card.currentSlide * -100 + '%)'}">
              <div class="image" *ngFor="let image of card.images">
                <img [src]="image" alt="Image">
              </div>
            </div>
            <div class="slider-controls">
              <button (click)="prevSlide(card)">‹</button>
              <button (click)="nextSlide(card)">›</button>
            </div>
          </div>
          <div class="book-now-container">
            <button (click)="bookNow(card)">Book Now</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Buy content: Placeholder or other content -->
    <div *ngIf="selectedOption === 'buy'">
      <h2>Buy Section</h2>
      <p>Here you can buy items...</p>
    </div>

    <!-- History content: Placeholder or other content -->
    <div *ngIf="selectedOption === 'history'">
      <h2>History Section</h2>
      <p>Your history of purchases...</p>
    </div>
  </div>
</div>


CSS 




/* Sidebar styles */
 .sidebar {
  width: 200px;
  background-color: #f4f4f4;
  padding: 20px;
  height: 100vh;
  position: fixed; 
  top: 0;
  left: 0;
  display: flex;  
  justify-content: center; 
  align-items: center;  
  transition: transform 0.3s ease;
} 

.sidebar.hidden {
  transform: translateX(-100%); /* Hide the sidebar */
}  
.sidebar ul {
  list-style: none;
  padding: 0;
  width: 100%; 
  text-align: center;  
}

.sidebar ul li {
  padding: 15px;
  margin: 10px 0;
  background-color: #ddd;
  cursor: pointer;
  border-radius: 5px;
}

.sidebar ul li.active {
  background-color: #007bff;
  color: white;
}

.sidebar ul li:hover {
  background-color: #0056b3;
  color: white;
}

/* Main content styles */
/* .main-content {
  margin-left: 220px; 
  padding: 20px;
  width: calc(100% - 220px);
} */
.main-content {
  margin-left: 220px; /* Adjust margin when sidebar is visible */
  transition: margin-left 0.3s ease;
}

.main-content.expanded {
  margin-left: 0; /* Remove margin when sidebar is hidden */
}

h2 {
  margin-top: 0;
}
/* Toggle button */
.toggle-btn {
  position: fixed;
  top: 20px;
  left: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
  z-index: 1000; /* Ensure it's above other elements */
}

.toggle-btn:hover {
  background-color: #0056b3;
}

/* Card container */
.card-container {
  display: block; 
  padding: 40px; 
}

/* Card styles */
.card {
  position: relative;
  width: 100%;
  margin-bottom: 30px;
  padding: 15px;
  background-color: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  overflow: hidden;
}

/* Card content layout */
.card-content {
  display: flex;
  flex-direction: row; /* Two-column layout */
  justify-content: flex-start;
  align-items: flex-start;
  padding: 10px;
}

/* Card main image */
.card-main-image {
  padding-right: 20px;

  width: 300px; /* Fixed width for the image */
  height: auto;
  overflow: hidden;
  flex-shrink: 0; /* Prevent the image from shrinking */
}

.card-main-image img {
  width: 100%; /* Ensure the image scales properly within the container */
  height: auto;
  border-radius: 4px;
}

/* Card description styles */
.card-description {
  padding-top: 20px; /* Space between image and description */
   /* Space between image and description */
  flex: 1; /* Allow description to take up remaining space */
}

.card-description h2 {
  margin: 0;
  font-size: 1.5em;
  color: #333;
}

.card-description p {
  color: #666;
}

.card-description button {
  margin-top: 10px; 
}

/* Expanded card styles */
.card.expanded {
  padding: 20px;
  background-color: #f0f0f0;
  transition: all 0.3s ease;
  display: flex; /* Flexbox for expanded layout */
  flex-direction: row; /* Arrange content in a row */
}

/* Expanded content - main image and description layout */
.card.expanded .card-content {
  flex-direction: column; /* Stack main image and description vertically */
  width: 50%; /* Main content width */
}

.card.expanded .card-details {
  width: 50%; /* Sidebar width */
  padding-left: 20px; /* Space between main content and details */
  padding-right: 20px; /* Space between main content and details */
}

/* Slider styles */
.card-images {
  width: 100%;
  height: auto;
  overflow: hidden;
}

.card-images img {
  width: 100%; 
  height: auto;
  border-radius: 4px; 
}

.slider-wrapper {
  display: flex;
  transition: transform 0.5s ease-in-out;
}

.image {
  min-width: 100%; /* Each image takes full width of the slider */
}

.slider-controls {
  position: absolute;
  top: 40%; /* Center the controls vertically */
  

  right:70px;
  transform: translateY(-50%);
  width: 40%; /* Make sure controls cover the full width of the image */
  display: flex;
  justify-content: space-between; /* Space the buttons evenly */
  padding: 0 10px; /* Add some padding to prevent the buttons from touching the image edges */
  box-sizing: border-box; /* Make sure padding is included in the width calculation */
}
.slider-controls button {
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
  border-radius: 50%;
}

button:focus {
  outline: none;
}

/* Book Now button styles */
.book-now-container {
  margin-top: 30px; 
  
  /* Space between slider and button */
  display: flex;
  justify-content: center; /* Right alignment */
}

.book-now-container button {
  background-color: #007bff;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}


/* For nav Search */

/* Container for search and toggle */
.search {
  display: flex;
  justify-content: center;
  gap: 20px; /* Increase space between elements */
  padding: 20px;
}

/* Style for the search input */
.search-input {
  width: 250px; /* Larger input size */
  padding: 12px 20px;
  border-radius: 30px; /* Rounded corners */
  border: 2px solid #1e90ff; /* Blue border */
  font-size: 16px;
  box-shadow: 0 0 10px rgba(30, 144, 255, 0.3); /* Blue glow effect */
  transition: border-color 0.3s, box-shadow 0.3s;
}

.search-input:focus {
  border-color: #ffc107; /* Yellow border on focus */
  box-shadow: 0 0 15px rgba(255, 193, 7, 0.7); /* Yellow glow effect */
}

/* Style for the search button */
.search-btn {
  background-color: #1e90ff; /* Blue button */
  border: none;
  border-radius: 30px;
  color: white;
  padding: 12px 30px;
  font-size: 16px;
  cursor: pointer;
  box-shadow: 0 0 10px rgba(30, 144, 255, 0.3); /* Subtle blue glow */
  transition: background-color 0.3s, box-shadow 0.3s;
}

.search-btn:hover {
  background-color: #ffc107; /* Change to yellow on hover */
  box-shadow: 0 0 15px rgba(255, 193, 7, 0.7); /* Yellow glow on hover */
}

/* Style for the toggle button */
.toggle-btn {
  background-color: #1e90ff; /* Blue button */
  border: none;
  border-radius: 50%;
  color: white;
  padding: 10px; /* Reduced padding */
  cursor: pointer;
  font-size: 18px; /* Smaller icon size */
  box-shadow: 0 0 10px rgba(30, 144, 255, 0.3); /* Blue glow effect */
  transition: background-color 0.3s, box-shadow 0.3s;
}

.toggle-btn:hover {
  background-color: #ffc107; /* Yellow on hover */
  box-shadow: 0 0 15px rgba(255, 193, 7, 0.7); /* Yellow glow on hover */
}



 copy this card styles alone to this project <div *ngIf="loading" class="text-center">Loading...</div>
<div *ngIf="error" class="alert alert-danger text-center">{{ error }}</div>
<div *ngIf="!loading && !error" class="container">
  <div class="row">
    <div *ngFor="let room of rooms" class="col-md-4 mb-4">
      <div class="card">
        <img [src]="room.imagePath" class="card-img-top" alt="Room image">
        <div class="card-body">
          <div class="card-header-content">
            <span class="badge card-price">{{ room.price }}</span>
            <span class="price-label">Per Night</span>
          </div>
          <p class="card-text">More details about the room can go here.</p>
          <!-- Trigger modal on button click -->
          <button 
            (click)="openModal(modalContent, room)" 
            class="btn btn-primary btn-block" 
            [disabled]="room.isBooked">
            {{ room.isBooked ? 'Booked' : 'View Details' }}
          </button>
        </div>
        <div class="card-footer">
          <small class="text-white">{{ room.roomType }}</small>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Room Details Modal -->
<ng-template #modalContent let-modal>
  <div class="modal-header">
    <div class="marquee-container">
      <marquee>BOOK NOW !!! ENJOY THE MOON!!!</marquee>
    </div>
  </div>
  <div class="modal-body">
    <div class="container">
        <div class="row">
        <div class="col-md-4">
          <img [src]="selectedRoom?.imagePath" class="img-fluid" alt="Room image">
        </div>
        <div class="col-md-4">
          <div class="details-box">
            <p><strong>Price:</strong> {{ selectedRoom?.price }} per night</p>
            <p><strong>Type:</strong> {{ selectedRoom?.roomType }}</p>
            <p><strong>Description:</strong> {{ selectedRoom?.description }}</p>
            <p><strong>Location:</strong> {{ selectedRoom?.location }}</p>
            <p><strong>Amenities:</strong> {{ selectedRoom?.amenities }}</p>
            <p><strong>Rating:</strong> {{ selectedRoom?.rating }}</p>
          </div>
        </div>
        <div class="col-md-4">
          <div class="price-details">
            <h4 class="text-center">{{ selectedRoom?.price }}</h4>
            <p class="text-center">Per Night</p>
            <button 
              type="button" 
              class="btn btn-success btn-block" 
              (click)="openPaymentModal()" 
              [disabled]="selectedRoom?.isBooked">
              {{ selectedRoom?.isBooked ? 'Booked' : 'Book Now' }}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-secondary" (click)="modal.dismiss('Close click')">Close</button>
  </div>
</ng-template>

<!-- Payment Modal -->
<ng-template #paymentModalTemplate let-modal>
  <div class="modal-header">
    <h5 class="modal-title">Payment Details</h5>
    <button type="button" class="close" aria-label="Close" (click)="modal.hide()">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
  <div class="modal-body">
    <form (ngSubmit)="processPayment()" [formGroup]="paymentForm">
      <div class="form-group">
        <label for="amount">Amount</label>
        <input type="text" id="amount" class="form-control" [value]="selectedRoom?.price" disabled>
      </div>
      <div class="form-group">
        <label for="cardNumber">Card Number</label>
        <input type="text" id="cardNumber" class="form-control" formControlName="cardNumber">
        <div *ngIf="paymentForm.get('cardNumber')?.invalid && paymentForm.get('cardNumber')?.touched" class="text-danger">
          Card number is required and must be 16 digits.
        </div>
      </div>
      <div class="form-group">
        <label for="expiryDate">Expiry Date</label>
        <input type="text" id="expiryDate" class="form-control" formControlName="expiryDate">
        <div *ngIf="paymentForm.get('expiryDate')?.invalid && paymentForm.get('expiryDate')?.touched" class="text-danger">
          Expiry date is required and must be in MM/YY format.
        </div>
      </div>
      <div class="form-group">
        <label for="cvv">CVV</label>
        <input type="text" id="cvv" class="form-control" formControlName="cvv">
        <div *ngIf="paymentForm.get('cvv')?.invalid && paymentForm.get('cvv')?.touched" class="text-danger">
          CVV is required and must be 3 digits.
        </div>
      </div>
      <button type="submit" class="btn btn-primary" [disabled]="paymentForm.invalid">Pay</button>
    </form>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-secondary" (click)="modal.hide()">Close</button>
  </div>
</ng-template>



/ Sidebar styles /
.sidebar {
  width: 200px;
  background-color: #f4f4f4;
  padding: 20px;
  height: 100vh;
  position: fixed; 
  top: 0;
  left: 0;
  display: flex;  
  justify-content: center; 
  align-items: center;  
  transition: transform 0.3s ease;
} 

.sidebar.hidden {
  transform: translateX(-100%); / Hide the sidebar /
}  
.sidebar ul {
  list-style: none;
  padding: 0;
  width: 100%; 
  text-align: center;  
}

.sidebar ul li {
  padding: 15px;
  margin: 10px 0;
  background-color: #ddd;
  cursor: pointer;
  border-radius: 5px;
}

.sidebar ul li.active {
  background-color: #007bff;
  color: white;
}

.sidebar ul li:hover {
  background-color: #0056b3;
  color: white;
}

/ Main content styles /
/* .main-content {
  margin-left: 220px; 
  padding: 20px;
  width: calc(100% - 220px);
} */
.main-content {
  margin-left: 220px; / Adjust margin when sidebar is visible /
  transition: margin-left 0.3s ease;
}

.main-content.expanded {
  margin-left: 0; / Remove margin when sidebar is hidden /
}

h2 {
  margin-top: 0;
}
/ Toggle button /
.toggle-btn {
  position: fixed;
  top: 20px;
  left: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
  z-index: 1000; / Ensure it's above other elements /
}

.toggle-btn:hover {
  background-color: #0056b3;
}

/ Card container /
.card-container {
  display: block; 
  padding: 40px; 
}

/ Card styles /
.card {
  position: relative;
  width: 100%;
  margin-bottom: 30px;
  padding: 15px;
  background-color: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  overflow: hidden;
}

/ Card content layout /
.card-content {
  display: flex;
  flex-direction: row; / Two-column layout /
  justify-content: flex-start;
  align-items: flex-start;
  padding: 10px;
}

/ Card main image /
.card-main-image {
  padding-right: 20px;

  width: 300px; / Fixed width for the image /
  height: auto;
  overflow: hidden;
  flex-shrink: 0; / Prevent the image from shrinking /
}

.card-main-image img {
  width: 100%; / Ensure the image scales properly within the container /
  height: auto;
  border-radius: 4px;
}

/ Card description styles /
.card-description {
  padding-top: 20px; / Space between image and description /
   / Space between image and description /
  flex: 1; / Allow description to take up remaining space /
}

.card-description h2 {
  margin: 0;
  font-size: 1.5em;
  color: #333;
}

.card-description p {
  color: #666;
}

.card-description button {
  margin-top: 10px; 
}

/ Expanded card styles /
.card.expanded {
  padding: 20px;
  background-color: #f0f0f0;
  transition: all 0.3s ease;
  display: flex; / Flexbox for expanded layout /
  flex-direction: row; / Arrange content in a row /
}

/ Expanded content - main image and description layout /
.card.expanded .card-content {
  flex-direction: column; / Stack main image and description vertically /
  width: 50%; / Main content width /
}

.card.expanded .card-details {
  width: 50%; / Sidebar width /
  padding-left: 20px; / Space between main content and details /
  padding-right: 20px; / Space between main content and details /
}

/ Slider styles /
.card-images {
  width: 100%;
  height: auto;
  overflow: hidden;
}

.card-images img {
  width: 100%; 
  height: auto;
  border-radius: 4px; 
}

.slider-wrapper {
  display: flex;
  transition: transform 0.5s ease-in-out;
}

.image {
  min-width: 100%; / Each image takes full width of the slider /
}

.slider-controls {
  position: absolute;
  top: 40%; / Center the controls vertically /
  

  right:70px;
  transform: translateY(-50%);
  width: 40%; / Make sure controls cover the full width of the image /
  display: flex;
  justify-content: space-between; / Space the buttons evenly /
  padding: 0 10px; / Add some padding to prevent the buttons from touching the image edges /
  box-sizing: border-box; / Make sure padding is included in the width calculation /
}
.slider-controls button {
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
  border-radius: 50%;
}

button:focus {
  outline: none;
}

/ Book Now button styles /
.book-now-container {
  margin-top: 30px; 
  
  / Space between slider and button /
  display: flex;
  justify-content: center; / Right alignment /
}

.book-now-container button {
  background-color: #007bff;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}


/ For nav Search /

/ Container for search and toggle /
.search {
  display: flex;
  justify-content: center;
  gap: 20px; / Increase space between elements /
  padding: 20px;
}

/ Style for the search input /
.search-input {
  width: 250px; / Larger input size /
  padding: 12px 20px;
  border-radius: 30px; / Rounded corners /
  border: 2px solid #1e90ff; / Blue border /
  font-size: 16px;
  box-shadow: 0 0 10px rgba(30, 144, 255, 0.3); / Blue glow effect /
  transition: border-color 0.3s, box-shadow 0.3s;
}

.search-input:focus {
  border-color: #ffc107; / Yellow border on focus /
  box-shadow: 0 0 15px rgba(255, 193, 7, 0.7); / Yellow glow effect /
}

/ Style for the search button /
.search-btn {
  background-color: #1e90ff; / Blue button /
  border: none;
  border-radius: 30px;
  color: white;
  padding: 12px 30px;
  font-size: 16px;
  cursor: pointer;
  box-shadow: 0 0 10px rgba(30, 144, 255, 0.3); / Subtle blue glow /
  transition: background-color 0.3s, box-shadow 0.3s;
}

.search-btn:hover {
  background-color: #ffc107; / Change to yellow on hover /
  box-shadow: 0 0 15px rgba(255, 193, 7, 0.7); / Yellow glow on hover /
}

/ Style for the toggle button /
.toggle-btn {
  background-color: #1e90ff; / Blue button /
  border: none;
  border-radius: 50%;
  color: white;
  padding: 10px; / Reduced padding /
  cursor: pointer;
  font-size: 18px; / Smaller icon size /
  box-shadow: 0 0 10px rgba(30, 144, 255, 0.3); / Blue glow effect /
  transition: background-color 0.3s, box-shadow 0.3s;
}

.toggle-btn:hover {
  background-color: #ffc107; / Yellow on hover /
  box-shadow: 0 0 15px rgba(255, 193, 7, 0.7); / Yellow glow on hover /
}



/ STYLE FOR SORT MIN MAX  /

.sort-container {
  display: flex;
  align-items: center;
  gap: 10px; / Adds space between the elements /
}

.form-inline {
  display: flex;
  align-items: center;
}

.min-input, .max-input {
  width: 80px;
  margin-right: 10px; / Space between the inputs /
  border: 1px solid #ccc;
  padding: 8px;
  border-radius: 5px;
}

.apply-btn {
  margin-left: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  padding: 8px 20px;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.apply-btn:hover {
  background-color: #0056b3;
}

button:focus {
  outline: none;
}  import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
@Component({
  selector: 'app-user-rooms',
  templateUrl: './user-rooms.component.html',
  styleUrls: ['./user-rooms.component.css']
})
export class UserRoomsComponent implements OnInit {
  
  rooms: any[] = [];
  loading: boolean = true;
  error: string | null = null;
  selectedRoom: any = null;
  paymentForm: FormGroup;
  modalRef?: BsModalRef; // For the Room Details Modal
  paymentModalRef?: BsModalRef; // For the Payment Modal

  @ViewChild('paymentModalTemplate', { static: false }) paymentModalTemplate?: TemplateRef<any>;

  constructor(private http: HttpClient, private modalService: BsModalService, private fb: FormBuilder) {
    this.paymentForm = this.fb.group({
      cardNumber: ['', [Validators.required, Validators.pattern(/^\d{16}$/)]],
      expiryDate: ['', [Validators.required, Validators.pattern(/^(0[1-9]|1[0-2])\/\d{2}$/)]],
      cvv: ['', [Validators.required, Validators.pattern(/^\d{3}$/)]]
    });
  }

  ngOnInit(): void {
    this.http.get<any[]>('http://localhost:5046/api/Room/GetRooms').subscribe({
      next: (data) => {
        this.rooms = data;
        this.loading = false;
      },
      error: (err) => {
        this.error = 'Failed to load rooms';
        this.loading = false;
      }
    });
  }

  openModal(template: TemplateRef<any>, room: any): void {
    this.selectedRoom = room;
    this.modalRef = this.modalService.show(template);
  }

  openPaymentModal(): void {
    if (this.paymentModalTemplate) {
      this.paymentModalRef = this.modalService.show(this.paymentModalTemplate);
    } else {
      console.error('Payment modal template is not defined');
    }
  }

  processPayment(): void {
    if (this.paymentForm.invalid) {
      // Mark all fields as touched to show validation errors
      this.paymentForm.markAllAsTouched();
      return;
    }

    const payload = {
      amount: this.selectedRoom?.price,
      cardNumber: this.paymentForm.get('cardNumber')?.value,
      expiryDate: this.paymentForm.get('expiryDate')?.value,
      cvv: this.paymentForm.get('cvv')?.value,
      roomId: this.selectedRoom?.id
    };

    this.http.post('http://localhost:5046/api/Payment/ProcessPayment', payload)
      .subscribe({
        next: (response: any) => {
          console.log('Payment response:', response);
          alert(response.message || 'Payment successful!');
          this.paymentModalRef?.hide();
          if (this.selectedRoom) {
            this.selectedRoom.isBooked = true;
          }
        },
        error: (err) => {
          console.error('Payment error:', err);
          const errorMessage = err.error?.message || 'Payment failed.';
          alert(errorMessage);
        }
      });
  }
}  














.modal-content {
  height: auto !important; /* Reduce height according to content */
  width: auto !important; /* Adjust width as per content */
}



.modal-content {
  height: auto !important; /* Adjust height according to content */
  width: auto !important; /* Adjust width as per content */
}

































CSSS 

/* Full Width and Centering */
.container {
  width: 100%;
  display: flex;
  justify-content: center;
  padding: 0;
}

/* Date Range Inputs */
.date-range-horizontal {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 1rem;
  width: 100%;
}

.form-group {
  flex: 1;
  min-width: 150px;
  display: flex;
  flex-direction: column;
}

.form-group label {
  margin-bottom: 0.5rem;
  font-weight: bold;
}

.form-group select,
.form-group input {
  width: 100%;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid #ddd;
  box-sizing: border-box;
}

/* Person Selector */
.person-selector {
  display: flex;
  align-items: center;
}

.person-selector button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 0.5rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1.1rem;
}

.person-selector button:hover {
  background-color: #0056b3;
}

/* Apply Button */
.apply-b {
  background-color: #28a745;
  color: #fff;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-left: auto;
}

.apply-b:hover {
  background-color: #218838;
}

/* Card Styling */
.card {
  border-radius: 8px;
  overflow: hidden;
  transition: transform 0.3s;
  background-color: #fff;
}

.card:hover {
  transform: translateY(-5px);
}

.card-img-top {
  width: 100%;
  height: auto;
}

.card-body {
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.room-details {
  flex: 1;
}

.price-details {
  text-align: right;
}

.card-price {
  font-size: 1.2rem;
  color: #333;
  font-weight: bold;
}

button {
  margin-top: 0.5rem;
}

/* Modal Image Slider */
.modal-images-slider {
  position: relative;
  margin-bottom: 1.5rem;
}

.image-container {
  display: flex;
  flex: 1; /* Allow the image container to take up available space */
  overflow: hidden;
  height: 100%;
}

.modal-image {
  width: 100%;
  height: 100%; /* Stretch image to fill container */
  object-fit: cover; /* Maintain image aspect ratio */
  transition: transform 0.5s ease;
}

.modal-image.active {
  transform: scale(1.1);
}

.slider-controls {
  position: absolute;
  top: 50%;
  width: 100%;
  display: flex;
  justify-content: space-between;
}

.slider-btn {
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  border: none;
  padding: 10px;
  cursor: pointer;
}

.slider-btn:hover {
  background-color: rgba(0, 0, 0, 0.7);
}

/* Room Details Layout */
.room-details-container {
  margin-top: 1rem;
}

.details-box {
  flex: 0.5; /* Reduce width of the details box */
  padding: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #f9f9f9;
  display: flex;
  flex-direction: column; /* Stack the details vertically */
  justify-content: flex-start; /* Align items to the top */
  height: 100%; /* Make the details box as tall as the slider */
  margin-left:20px;
 
}

.details-box p {
  margin: 0.5rem 0;
  margin-left: 20px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .details-box {
    padding: 0.5rem;
  }

  .image-container {
    flex-direction: column;
  }
}
.modal-images-slider {
  position: relative;
}

.image-container {
  display: flex;
  overflow: hidden;
}

.modal-image {
  width: 100%;
  transition: transform 0.5s ease;
}

.slider-controls {
  text-align: center;
  margin-top: 10px;
}

.slider-btn {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}
@media (min-width: 768px) {
  .col-md-4 {
      height:350px ;
      width: 350px;
  }
}

.modal-body {
  position: relative;
  height: 750px;
  width:500px;
  padding: var(--bs-modal-padding);
}
.modal-lg, .modal-xl {
  --bs-modal-width: 500px  !important; 
}

.modal-content {
  height: 63% !important;

}
/* Modal Image Slider */
.modal-images-slider {
  display: flex; /* Side-by-side layout for image and details */
  align-items: stretch; /* Align content to the top */
  gap: 1rem; /* Space between slider and details */
  margin-bottom: 1.5rem;
  width: 100%;
}

.image-container {
  flex: 1; /* Make the image container take up available space */
  overflow: hidden;
}

.modal-image {
  width: 100%;
  transition: transform 0.5s ease;
}

/* Details Box Styling */
.details-box {
  flex: 0.5; /* Reduce width of the details box */
  padding: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #f9f9f9;
  display: flex;
  flex-direction: column; /* Stack the details vertically */
  justify-content: flex-start; /* Align items to the top */
}

.details-box p {
  margin: 0.5rem 0;
}

/* Reduce height of the modal content based on content */
.modal-body {
  display: flex;
  flex-direction: row;
  height: auto; /* Dynamic height adjustment */
  width: 100%;
}

.slider-controls {
  position: absolute;
  top: 50%;
  width: 100%;
  display: flex;
  justify-content: space-between;
}

.slider-btn {
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  border: none;
  padding: 10px;
  cursor: pointer;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .modal-images-slider {
    flex-direction: column; /* Stack slider and details on smaller screens */
  }

  .details-box {
    width: 100%; /* Full width for details on small screens */
    margin-left: 0; /* Remove left margin for small screens */
  }
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.card {
  border: 1px solid #ddd;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s, box-shadow 0.3s;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.2);
}

.card-img-top {
  width: 100%;
  height: 200px;
  object-fit: cover;
  border-bottom: 1px solid #ddd;
}

.card-body {
  padding: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.room-details {
  flex: 1;
  padding-right: 10px;
}

.room-details h5 {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 10px;
}

.price-details {
  text-align: right;
}

.card-price {
  font-size: 16px;
  font-weight: bold;
  display: block;
  margin-bottom: 10px;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.btn-primary {
  background-color: #ff6f3d;
  color: white;
}

.btn-primary:hover {
  background-color: #e55b2a;
  color: white;
}

.btn-success {
  background-color: #28a745;
  color: white;
}

.btn-success:hover {
  background-color: #218838;
  color: white;
}

.btn[disabled] {
  background-color: #ccc;
  cursor: not-allowed;
}

.card-body .btn {
  flex: 1;
}

.btn-primary,
.btn-success {
  transition: background-color 0.5s ease, color 0.5s ease;
}

.btn-primary:hover,
.btn-success:hover {
  background-color: #ff4500;
  color: black;
  transition: background-color 0.5s ease, color 0.5s ease;
}

.btn-primary {
  background-color: #ff6f3d;
  transition: background-color 0.5s ease, color 0.5s ease;
}

.btn-primary:hover {
  background-color: #ff4500;
  color: black;
  transition: background-color 0.5s ease, color 0.5s ease;
}
/* Payment Modal Container */
.modal-dialog {
  max-width: 450px;
  margin: 50px auto;
  border-radius: 10px;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

/* Modal Header */
.modal-header {
  background-color: #f9fafb;
  padding: 15px 20px;
  border-bottom: none;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 10px 10px 0 0;
}

.modal-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #333;
}

.close {
  font-size: 1.3rem;
  color: #888;
  opacity: 0.6;
}

.close:hover {
  opacity: 1;
}

/* Modal Body */
.modal-body {
  padding: 30px 25px;
  background-color: #ffffff;
  line-height: 1.8;
}

.form-group label {
  font-weight: 600;
  color: #555;
  margin-bottom: 8px;
  display: block;
}

.form-control {
  border: 1px solid #ccc;
  padding: 10px 15px;
  border-radius: 5px;
  font-size: 14px;
  width: 100%;
  transition: all 0.3s;
}

.form-control:focus {
  border-color: #6c63ff;
  box-shadow: 0 0 8px rgba(108, 99, 255, 0.2);
}

.form-group {
  margin-bottom: 20px;
}

.text-danger {
  font-size: 12px;
  color: #e74c3c;
}

/* Submit Button Styles */
.btn-primary {
  background-image: linear-gradient(45deg, #6c63ff, #9b9aff);
  border: none;
  padding: 12px 18px;
  font-size: 16px;
  color: #fff;
  border-radius: 30px;
  width: 100%;
  text-align: center;
  transition: background 0.3s ease;
}

.btn-primary:hover {
  background-image: linear-gradient(45deg, #5a54e0, #7e7aff);
}

/* Close Button Styles */
.btn-secondary {
  background-color: #f1f1f1;
  border-color: #e2e2e2;
  color: #555;
  padding: 10px 20px;
  font-size: 14px;
  border-radius: 30px;
  transition: background-color 0.3s;
}

.btn-secondary:hover {
  background-color: #e2e2e2;
}

/* Modal Footer */
.modal-footer {
  padding: 15px 20px;
  background-color: #f9fafb;
  border-top: none;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 0 0 10px 10px;
}

/* Payment Form Specifics */
input[type="text"]:disabled {
  background-color: #f1f1f1;
  font-weight: bold;
}

/* Mobile Responsiveness */
@media (max-width: 576px) {
  .modal-dialog {
    max-width: 100%;
    margin: 10px;
  }
  
  .btn-primary {
    font-size: 14px;
    padding: 10px;
  }
}
.payment-container {
  max-width: 600px; /* Doubled the width */
  margin: 0 auto;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.payment-container h1 {
  text-align: center;
  margin-bottom: 20px;
}

.card-row {
  display: flex;
  justify-content: space-around;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  font-weight: bold;
}

.form-control {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  font-size: 16px;
}

.btn {
  width: 100%;
  padding: 12px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.btn-primary:disabled {
  background-color: #6c757d;
}

.btn-secondary {
  background-color: #6c757d;
  width: 100%;
}

.modal-header {
  padding: 10px;
  border-bottom: 1px solid #e9ecef;
}

.modal-body {
  padding: 20px;
}

.modal-footer {
  padding: 10px;
  border-top: 1px solid #e9ecef;
}

.text-danger {
  color: #dc3545;
  font-size: 14px;
}
